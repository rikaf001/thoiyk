/*
This source code is part of the KFRAMEWORK  (http://k-framework.sourceforge.net/)
Copyright (C) 2001  Alejandro Vazquez, Ke Li
Feedback / Bug Reports vmaxxed@users.sourceforge.net

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */



package KFramework30.Base;

//rtl
import java.util.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.event.*;

// ale utils
import KFramework30.Base.*;


public class sortListDialogClass extends javax.swing.JDialog                 
        implements ListSelectionListener{

        //uses
	private KConfigurationClass configuration;
	private KLogClass log;

        private java.util.Map           fakeRealFieldNameMap;
        private java.util.List          sortedList;
        
        java.awt.Window parent;
        
       // has - defaulted


    /** Creates new form sortListDialogClass */
    public sortListDialogClass(
            KConfigurationClass configurationParam, KLogClass logParam, java.awt.Window parentParam,                                
            java.util.List   FieldNameListParam ) 
    throws KExceptionClass  
    {
        super( parentParam, java.awt.Dialog.ModalityType.DOCUMENT_MODAL );
        

        
        //uses
        configuration = configurationParam;
        log = logParam;    
        parent = parentParam;
        
        //has ---- defaulted
        
        initComponents ();   
        pack ();        
        // width, height, position
        setSize( 457, 303 );
        KMetaUtilsClass.centerInScreen( this );                
  
        fakeRealFieldNameMap = new  HashMap();
        sortedList = new ArrayList();
        
        fillList( FieldNameListParam );
        
        //set destination list to single selection
        destinationList.setSelectionMode( ListSelectionModel.SINGLE_SELECTION );
        
        //Registering listener class
        sourceList.addListSelectionListener( this );
        destinationList.addListSelectionListener( this ); 
        
        //Select the first item.
        if( sourceList.getModel().getSize() != 0 )
            sourceList.setSelectedIndex( 0 ); 

        setButtonStates();      
        
                
    }

    
    /** Fill the source list with field fake names  */
    private void fillList( java.util.List fakeRealFieldNameList )        
    {
        DefaultListModel sourceListModel = new DefaultListModel();       
        DefaultListModel destinationListModel = new DefaultListModel();    
        fakeRealFieldNameMap.clear();
        
        Iterator columnNames = fakeRealFieldNameList.iterator();   
        
        while( columnNames.hasNext() ){   
            fakeRealFieldNameClass pair = ( fakeRealFieldNameClass )columnNames.next();
            fakeRealFieldNameMap.put( pair.fakeName, pair.realName );
            
            sourceListModel.addElement( pair.fakeName );
        }
        
        //MaAlejandro Vazquez, Ke Li, Behaven Patel, Maricela Islasst model editable
        sourceList.setModel( sourceListModel );      
        destinationList.setModel( destinationListModel );  
    }  
    
    
     private void setButtonStates()
     {
        //enable and disable components
        if( sourceList.isSelectionEmpty() )
            ToRight.setEnabled( false );
        else
            ToRight.setEnabled( true );
        
        
        if( destinationList.isSelectionEmpty() ) {
            ToLeft.setEnabled( false );
            Up.setEnabled( false );
            Down.setEnabled( false );
        }
        else {
            ToLeft.setEnabled( true );
            Up.setEnabled( true );
            Down.setEnabled( true );
        }  
        
        if( ( (DefaultListModel) destinationList.getModel() ).size() == 0 ) {
            clearAll.setEnabled( false );
        }
        else {
            clearAll.setEnabled( true );           
        }
        
     }
        
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
     private void initComponents() {//GEN-BEGIN:initComponents
         jLayeredPane2 = new javax.swing.JLayeredPane();
         setOrderPanel = new javax.swing.JPanel();
         jLabel1 = new javax.swing.JLabel();
         jLabel2 = new javax.swing.JLabel();
         jScrollPane1 = new javax.swing.JScrollPane();
         sourceList = new javax.swing.JList();
         jScrollPane2 = new javax.swing.JScrollPane();
         destinationList = new javax.swing.JList();
         ToRight = new javax.swing.JButton();
         ToLeft = new javax.swing.JButton();
         Up = new javax.swing.JButton();
         Down = new javax.swing.JButton();
         clearAll = new javax.swing.JButton();
         Cancel = new javax.swing.JButton();
         OK = new javax.swing.JButton();
         getContentPane().setLayout(null);
         addWindowListener(new java.awt.event.WindowAdapter() {
             public void windowClosing(java.awt.event.WindowEvent evt) {
                 closeDialog(evt);
             }
         }
         );
         
         
         setOrderPanel.setLayout(null);
           setOrderPanel.setBorder(new javax.swing.border.TitledBorder(
           new javax.swing.border.EtchedBorder(), "Set Order", 4, 2,
           new java.awt.Font ("Arial", 0, 10), java.awt.Color.black));
           
           jLabel1.setText("Colunm Names");
             jLabel1.setForeground(java.awt.Color.black);
             jLabel1.setFont(new java.awt.Font ("Arial", 0, 10));
             setOrderPanel.add(jLabel1);
             jLabel1.setBounds(10, 25, 110, 20);
             
             
           jLabel2.setText("Sort Order");
             jLabel2.setForeground(java.awt.Color.black);
             jLabel2.setFont(new java.awt.Font ("Arial", 0, 10));
             setOrderPanel.add(jLabel2);
             jLabel2.setBounds(220, 25, 110, 20);
             
             
           
             sourceList.setFont(new java.awt.Font ("Arial", 0, 10));
               jScrollPane1.setViewportView(sourceList);
               
               setOrderPanel.add(jScrollPane1);
             jScrollPane1.setBounds(10, 45, 130, 150);
             
             
           jScrollPane2.setFont(new java.awt.Font ("Arial", 0, 10));
             
             destinationList.setFont(new java.awt.Font ("Arial", 0, 10));
               jScrollPane2.setViewportView(destinationList);
               
               setOrderPanel.add(jScrollPane2);
             jScrollPane2.setBounds(223, 45, 130, 150);
             
             
           ToRight.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
             ToRight.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
             ToRight.setFont(new java.awt.Font ("Arial", 0, 10));
             ToRight.setText("add");
             ToRight.setMargin(new java.awt.Insets(2, 2, 2, 2));
             ToRight.addActionListener(new java.awt.event.ActionListener() {
                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                     ToRightActionPerformed(evt);
                 }
             }
             );
             setOrderPanel.add(ToRight);
             ToRight.setBounds(155, 60, 50, 50);
             
             
           ToLeft.setPreferredSize(new java.awt.Dimension(50, 50));
             ToLeft.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
             ToLeft.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
             ToLeft.setFont(new java.awt.Font ("Arial", 0, 10));
             ToLeft.setText("remove");
             ToLeft.setMargin(new java.awt.Insets(2, 2, 2, 2));
             ToLeft.setMinimumSize(new java.awt.Dimension(50, 50));
             ToLeft.addActionListener(new java.awt.event.ActionListener() {
                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                     ToLeftActionPerformed(evt);
                 }
             }
             );
             setOrderPanel.add(ToLeft);
             ToLeft.setBounds(155, 115, 50, 50);
             
             
           Up.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
             Up.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
             Up.setFont(new java.awt.Font ("Arial", 0, 10));
             Up.setText("up");
             Up.setMargin(new java.awt.Insets(2, 2, 2, 2));
             Up.addActionListener(new java.awt.event.ActionListener() {
                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                     UpActionPerformed(evt);
                 }
             }
             );
             setOrderPanel.add(Up);
             Up.setBounds(370, 60, 50, 50);
             
             
           Down.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
             Down.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
             Down.setFont(new java.awt.Font ("Arial", 0, 10));
             Down.setText("down");
             Down.setMargin(new java.awt.Insets(2, 2, 2, 2));
             Down.addActionListener(new java.awt.event.ActionListener() {
                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                     DownActionPerformed(evt);
                 }
             }
             );
             setOrderPanel.add(Down);
             Down.setBounds(370, 115, 50, 50);
             
             
           clearAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
             clearAll.setFont(new java.awt.Font ("Arial", 0, 10));
             clearAll.setText("clear");
             clearAll.addActionListener(new java.awt.event.ActionListener() {
                 public void actionPerformed(java.awt.event.ActionEvent evt) {
                     clearAllActionPerformed(evt);
                 }
             }
             );
             setOrderPanel.add(clearAll);
             clearAll.setBounds(360, 175, 70, 20);
             
             jLayeredPane2.add(setOrderPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
           setOrderPanel.setBounds(5, 5, 440, 205);
           
           
         Cancel.setFont(new java.awt.Font ("Arial", 0, 10));
           Cancel.setText("Cancel");
           Cancel.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                   CancelActionPerformed(evt);
               }
           }
           );
           jLayeredPane2.add(Cancel, javax.swing.JLayeredPane.DEFAULT_LAYER);
           Cancel.setBounds(374, 220, 70, 20);
           
           
         OK.setName("");
           OK.setFont(new java.awt.Font ("Arial", 0, 10));
           OK.setText("OK");
           OK.addActionListener(new java.awt.event.ActionListener() {
               public void actionPerformed(java.awt.event.ActionEvent evt) {
                   OKActionPerformed(evt);
               }
           }
           );
           jLayeredPane2.add(OK, javax.swing.JLayeredPane.DEFAULT_LAYER);
           OK.setBounds(270, 220, 70, 20);
           
           
         getContentPane().add(jLayeredPane2);
         jLayeredPane2.setBounds(0, 0, 640, 430);
         
     }//GEN-END:initComponents

  private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        try {      
            sortedList.clear();
            
            DefaultListModel destinationListModel = (DefaultListModel) destinationList.getModel();
            int len = destinationListModel.getSize();
            
            for( int i = 0; i<len; i++ ) {
                String real_name = (String) fakeRealFieldNameMap.get( destinationListModel.get(i) );
                sortedList.add(real_name);
            }            
        }
        catch( Exception error	){

                // log error
                log.log( this, KMetaUtilsClass.getStackTrace( error ) );		                
                // show error message
                KMetaUtilsClass.showErrorMessageFromException( parent, error );
        };   

        //close dialog
        setVisible (false);
        dispose ();      
  }//GEN-LAST:event_OKActionPerformed

  private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
       sortedList.clear();
       
        setVisible (false);
        dispose ();
  }//GEN-LAST:event_CancelActionPerformed

  private void clearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllActionPerformed
    try{

        DefaultListModel sourceListModel = (DefaultListModel) sourceList.getModel();
        DefaultListModel destinationListModel = (DefaultListModel) destinationList.getModel();
        int size = destinationListModel.size();
        
        for( int i = 0; i < size; i++ ) 
            //add to source list
            sourceListModel.addElement( destinationListModel.get(i) );   

        //clear all in destination list
        destinationListModel.clear();
        setButtonStates();  
    }
    catch( Exception error	){
             
            // log error
            log.log( this, KMetaUtilsClass.getStackTrace( error ) );		                
            // show error message
            KMetaUtilsClass.showErrorMessageFromException(  parent, error );
    }  
    
  }//GEN-LAST:event_clearAllActionPerformed

  private void DownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownActionPerformed

      try {
          
        DefaultListModel destinationListModel = (DefaultListModel) destinationList.getModel();

        if( !destinationList.isSelectionEmpty() ) {  
            int index = destinationList.getSelectedIndex();

            //not last item
            if( index != destinationListModel.getSize( ) - 1 ) {
                destinationListModel.insertElementAt( destinationList.getSelectedValue(), index+2 );
                destinationList.setSelectedIndex( index+2 ); 
                destinationListModel.remove( index );  
            }
        }  
    }
    catch( Exception error	){
             
            // log error
            log.log( this, KMetaUtilsClass.getStackTrace( error ) );		                
            // show error message
            KMetaUtilsClass.showErrorMessageFromException( parent, error );
    }       
      
      
  }//GEN-LAST:event_DownActionPerformed

  private void UpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpActionPerformed
      try {
          
        DefaultListModel destinationListModel = (DefaultListModel) destinationList.getModel();

        if( !destinationList.isSelectionEmpty() ) {  
            int index = destinationList.getSelectedIndex();

            //not first item
            if( index != 0 ) {
                destinationListModel.insertElementAt( destinationList.getSelectedValue(), index-1 );
                destinationListModel.remove( index+1 );  
                destinationList.setSelectedIndex( index-1 ); 
            }
        }
    }
    catch( Exception error	){
             
            // log error
            log.log( this, KMetaUtilsClass.getStackTrace( error ) );		                
            // show error message
            KMetaUtilsClass.showErrorMessageFromException( parent, error );
    }      
  }//GEN-LAST:event_UpActionPerformed

  private void ToLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToLeftActionPerformed
      try{
          
        int index = 0;
        DefaultListModel sourceListModel = (DefaultListModel) sourceList.getModel();
        DefaultListModel destinationListModel = (DefaultListModel) destinationList.getModel();

        while( !destinationList.isSelectionEmpty() ) {
            index = destinationList.getSelectedIndex();

            //add to destination list
            sourceListModel.addElement(destinationList.getSelectedValue());
            int size = sourceListModel.getSize();
            sourceList.setSelectedIndex( size - 1 ); 

            //delete from source list
            destinationListModel.remove( index );     
        }      

        int size = destinationListModel.getSize();

         //Adjust the selection
        if ( size != 0 )  {
            //removed item in last position
            if ( index == size )
                index--;
            //otherwise select same index
            destinationList.setSelectedIndex(index);   
        }    

        setButtonStates();  
    }
    catch( Exception error	){
             
            // log error
            log.log( this, KMetaUtilsClass.getStackTrace( error ) );		                
            // show error message
            KMetaUtilsClass.showErrorMessageFromException( parent, error );
    };      
  }//GEN-LAST:event_ToLeftActionPerformed

  private void ToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToRightActionPerformed
      try{
          
        int index = 0;
        DefaultListModel sourceListModel = (DefaultListModel) sourceList.getModel();
        DefaultListModel destinationListModel = (DefaultListModel) destinationList.getModel();

        while( !sourceList.isSelectionEmpty() ) {
            index = sourceList.getSelectedIndex();

            //add to destination list
            destinationListModel.addElement(sourceList.getSelectedValue());
            int size = destinationListModel.getSize();
            destinationList.setSelectedIndex( size - 1 ); 

            //delete from source list
            sourceListModel.remove( index );     
        }      

        int size = sourceListModel.getSize();

        //Adjust the selection
        if ( size != 0 ) {    
            //removed item in last position
            if ( index == size )
                index--;
            //otherwise select same index
            sourceList.setSelectedIndex(index); 
        } 

        setButtonStates(); 
    }
    catch( Exception error	){
             
            // log error
            log.log( this, KMetaUtilsClass.getStackTrace( error ) );		                
            // show error message
            KMetaUtilsClass.showErrorMessageFromException( parent, error );
    }         
  }//GEN-LAST:event_ToRightActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible (false);
        dispose ();
    }//GEN-LAST:event_closeDialog

    public void valueChanged(javax.swing.event.ListSelectionEvent p1) {
        //enable and disable components
        setButtonStates();          
    }    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JPanel setOrderPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList sourceList;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList destinationList;
    private javax.swing.JButton ToRight;
    private javax.swing.JButton ToLeft;
    private javax.swing.JButton Up;
    private javax.swing.JButton Down;
    private javax.swing.JButton clearAll;
    private javax.swing.JButton Cancel;
    private javax.swing.JButton OK;
    // End of variables declaration//GEN-END:variables

    //----------------------------------------------------------------------

    public java.util.List showSortListDialog(){    

            // show window
            show();

            // done return sortedList
            return( sortedList );
    }

    // -------------------------------------------------------------------------
}
